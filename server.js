require('dotenv').config();
const express = require('express');
const bodyParser = require('body-parser');
const fs = require('fs');
const app = express();

app.use(bodyParser.json());

app.post('/stars/payment', (req, res) => {
  const { user, transaction } = req.body;

  if (!user || !transaction) {
    return res.status(400).send('Invalid payload');
  }

  const { payload, amount } = transaction;

  // ‚úÖ –ü—Ä–∏–º–µ—Ä –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ payload
  if (payload !== 'buy_okup_box' || amount !== 20) {
    return res.status(400).send('Invalid purchase data');
  }

  // üìù –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫—É
  const logEntry = `[${new Date().toISOString()}] –ü–æ–∫—É–ø–∫–∞ –æ—Ç ${user.id} (${user.username || '–±–µ–∑ –Ω–∏–∫–∞'}): ${amount}‚≠êÔ∏è ‚Äî ${payload}\n`;

  fs.appendFile('purchases.log', logEntry, (err) => {
    if (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥:', err);
      return res.sendStatus(500);
    }

    console.log('–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∏ –∑–∞–ø–∏—Å–∞–Ω–∞.');
    res.sendStatus(200);
  });
});

app.listen(3000, () => {
  console.log('–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:3000');
});
